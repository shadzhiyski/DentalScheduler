@page "/schedule"
@attribute [Authorize(Roles = "Patient, Dentist")]

@using Microsoft.AspNetCore.Authorization;
@using System.Linq
@using Radzen
@using Components
@using Interfaces.Models.Input

@inject DialogService DialogService
@inject IScheduleService ScheduleService
@inject ILocalStorageService LocalStorage

<div class="row">
    <div class="col-md-12">
    <RadzenScheduler @ref="scheduler" style="height: 768px;" TItem="TreatmentSessionViewModel" Data="@AppointmentsData" StartProperty="Start" EndProperty="End" 
        TextProperty="TreatmentName" SelectedIndex="2" 
        SlotSelect="@OnSlotSelect" AppointmentSelect="@OnAppointmentSelect" AppointmentRender="@OnAppointmentRender">
        <RadzenDayView />
        <RadzenWeekView />
        <RadzenMonthView />
    </RadzenScheduler>
    </div>
</div>

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationStateTask { get; set; }

    RadzenScheduler<TreatmentSessionViewModel> scheduler;

    IList<TreatmentSessionViewModel> AppointmentsData { get; set; }

    protected override async Task OnInitializedAsync()
    {
        AppointmentsData = await GetAppointmentsAsync();
    }
    async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {
        var user = (await AuthenticationStateTask).User;
        if (user.IsInRole("Dentist"))
        {
            return;
        }
        
        DTO.Input.TreatmentSessionInput data = await DialogService.OpenAsync<EditAppointment>(
            "Add Treatment Session",
            new Dictionary<string, object> 
            {
                {
                    "Model", new DTO.Input.TreatmentSessionInput()
                    {
                        Status = "Requested",
                        DentalTeamReferenceId = default,
                        PatientReferenceId = await LocalStorage.GetItemAsync<Guid>("PatientReferenceId"),
                        TreatmentReferenceId = default,
                        Start = args.Start,
                        End = args.End
                    }
                }
            });

        if (data != null)
        {
            await ScheduleService.AddAppointmentsAsync(data);

            AppointmentsData = await GetAppointmentsAsync();
        }
    }

    async Task OnAppointmentSelect(SchedulerAppointmentSelectEventArgs<TreatmentSessionViewModel> args)
    {
        if (args.Data.Status.Equals("Accepted"))
        {
            return;
        }

        DTO.Input.TreatmentSessionInput dataToSet = new DTO.Input.TreatmentSessionInput()
        {
            Status = args.Data.Status,
            DentalTeamReferenceId = args.Data.DentalTeam.ReferenceId,
            PatientReferenceId = args.Data.PatientReferenceId,
            TreatmentReferenceId = args.Data.Treatment.ReferenceId,
            Start = args.Start,
            End = args.End
        };

        DTO.Input.TreatmentSessionInput resultData = null;

        var user = (await AuthenticationStateTask).User;
        if (user.IsInRole("Patient"))
        {
            resultData = await DialogService.OpenAsync<EditAppointment>("Edit Appointment", 
                new Dictionary<string, object> { { "Model", dataToSet } });
        }
        else if (user.IsInRole("Dentist"))
        {
            resultData = await DialogService.OpenAsync<ApproveAppointment>("Approve Appointment", 
                new Dictionary<string, object> { { "Model", dataToSet } });
        }

        if (resultData == null)
        {
            return;
        }

        await ScheduleService.EditAppointmentsAsync(resultData);

        AppointmentsData = await GetAppointmentsAsync();
    }

    void OnAppointmentRender(SchedulerAppointmentRenderEventArgs<TreatmentSessionViewModel> args)
    {
        // Never call StateHasChanged in AppointmentRender - would lead to infinite loop
        if (args.Data.Status == "Requested")
        {
            args.Attributes["style"] = "background: orange";
        }
        else if (args.Data.Status == "Accepted")
        {
            args.Attributes["style"] = "background: blue";
        }
        else 
        {
            args.Attributes["style"] = "background: red";
        }
    }

    private async Task<IList<TreatmentSessionViewModel>> GetAppointmentsAsync()
    {
        return (await ScheduleService.GetAppointmentsAsync(
                DateTimeOffset.UtcNow.AddMonths(-1),
                DateTimeOffset.UtcNow.AddMonths(1)
            ));
    }
}