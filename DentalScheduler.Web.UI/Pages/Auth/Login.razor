@page "/auth/login"
@layout LoginLayout
@using DentalScheduler.Interfaces.UseCases.Common.Validation
@using DentalScheduler.Interfaces.Models.Input
@using DentalScheduler.DTO.Input
@inject NavigationManager NavigationManager
@inject ApplicationAuthenticationStateProvider AuthenticationStateProvider
@inject IAuthService AuthService

@* <div class="row mb-4 px-3">
    <h6 class="mb-0 mr-4 mt-2">Sign in with</h6>
    <div class="text-center mr-3">
        <button type="submit" class="btn btn-lg btn-google btn-block text-uppercase"><i class="fab fa-google mr-2"></i>Google</button>
    </div>
    <div class="text-center mr-3">
        <button type="submit" class="btn btn-lg btn-google btn-block text-uppercase"><i class="fab fa-google mr-2"></i>Facebook</button>
    </div>
</div> *@

<EditForm class="form-signin" EditContext="@EditContext" OnValidSubmit="LoginClick">
    <ApplicationValidator TModel="@IUserCredentialsInput" />
    <div class="form-group">
        <label for="@nameof(Model.UserName)">@nameof(Model.UserName)</label>
        <InputText id="@nameof(Model.UserName)" @bind-Value="Model.UserName" class="form-control" placeholder="User Name" />
        <ValidationMessage For="@(() => Model.UserName)" />
    </div>
    <br />
    <div class="form-group">
        <label for="@nameof(Model.Password)">@nameof(Model.Password)</label>
        <InputText id="@nameof(Model.Password)" @bind-Value="Model.Password" class="form-control" type="password" placeholder="Password" />
        <ValidationMessage For="@(() => Model.Password)" />
    </div>
    <hr class="my-4">
    <button type="submit" class="form-control btn btn-primary btn-lg">Login</button>
    <span>&nbsp;</span>
    <button class="form-control btn btn-primary btn-lg" @onclick="@(e => NavigationManager.NavigateTo("/auth/register/"))">Register</button>
</EditForm>

<style>
.card-signin {
    border: 0;
    border-radius: 1rem;
    box-shadow: 0 0.5rem 1rem 0 rgba(0, 0, 0, 0.1);
    overflow: hidden;
}
.form-signin .btn {
    border-radius: 5rem;
    letter-spacing: .1rem;
    font-weight: bold;
    transition: all 0.2s;
}
.card-signin .card-title {
  margin-bottom: 2rem;
  font-weight: 300;
  font-size: 1.5rem;
}
.card-signin .card-img-left {
  width: 45%;
  /* Link to your background image using in the property below! */
  background: scroll center url('https://source.unsplash.com/WEQbe2jBg40/414x512');
  background-size: cover;
}
</style>

@code {
    [CascadingParameter]
    public Task<AuthenticationState> authenticationStateTask { get; set; }

    public EditContext EditContext { get; set; }
    
    public IUserCredentialsInput Model { get; set; } = new UserCredentialsInput();

    public string ResponseMessage { get; set; } = "Response Message";

    protected async override Task OnInitializedAsync()
    {
        var claimsPrincipal = (await authenticationStateTask).User;
        if (claimsPrincipal.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("");
        }

        EditContext = new EditContext(Model);
    }

    private async Task<bool> LoginClick()
    {
        var result = await AuthService.LoginAsync(Model);
        if (result.Value == null)
        {
            ResponseMessage = string.Join($"; <br />", ((IValidationError)result.Errors.First()).Errors);
        }
        else 
        {
            await AuthenticationStateProvider.MarkUserAsLoggedInAsync(Model, result.Value.AccessToken);

            NavigationManager.NavigateTo("", true);
        }

        return true;
    }
}