@typeparam TItem

<div class="col-12 row">
    <table class="table table-bordered table-striped mb-0">
        <thead class="bg-info">
            <tr>
                @GridColumns
            </tr>
        </thead>
        <tbody>
            @foreach (var item in PageItems)
            {
                <tr>
                    @GridRow(item)
                </tr>
            }
        </tbody>
    </table>
</div>

<br />
<div>
    <nav aria-label="Page navigation">
        <ul class="pagination justify-content-center @(LargePaginationButtons ? "pagination-lg" : "")">
            <li class="page-item">
                <button class="page-link" @onclick="@(e => NavigateTo("first"))" aria-label="First">
                    <span aria-hidden="true">&laquo;</span>
                    <span class="sr-only">First</span>
                </button>
            </li>
            <li class="page-item">
                <button class="page-link" @onclick="@(e => NavigateTo("prev"))" aria-label="Previous">
                    <span aria-hidden="true">Prev</span>
                    <span class="sr-only">Previous</span>
                </button>
            </li>
            @for (int i = 0; i < TotalLoadedPages; i++)
            {
                var pageNumber = i;
                <li class="page-item @(CurrentPage == pageNumber ? "active" : "")">
                    <button class="page-link" @onclick="@(e => UpdateList(pageNumber))">@(pageNumber + 1)</button>
                </li>
            }
            <li class="page-item">
                <button class="page-link" @onclick="@(e => NavigateTo("next"))" aria-label="Next">
                    <span aria-hidden="true">Next</span>
                    <span class="sr-only">Next</span>
                </button>
            </li>
            <li class="page-item @(EndReached ? "" : "disabled")">
                <button class="page-link" @onclick="@(e => NavigateTo("last"))" aria-label="Last">
                    <span aria-hidden="true">&raquo;</span>
                    <span class="sr-only">Last</span>
                </button>
            </li>
        </ul>
    </nav>
</div>

@code {

    [Parameter]
    public RenderFragment GridColumns { get; set; }

    [Parameter]
    public RenderFragment<TItem> GridRow { get; set; }

    [Parameter]
    public Func<PageLoadEventArgs, Task<List<TItem>>> OnPageLoad { get; set; }

    [Parameter]
    public List<TItem> Items { get; set; }
    
    [Parameter]
    public int PageSize { get; set; } = 5;

    [Parameter]
    public bool Refresh { get; set; }

    [Parameter]
    public bool LargePaginationButtons { get; set; } = false;

    public List<TItem> PageItems { get; set; } = new List<TItem>();

    public int TotalLoadedPages { get; set; }

    public int CurrentPage { get; set; }

    public bool EndReached { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await UpdateList();
        Refresh = false;

        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender && Refresh)
        {
            await UpdateList();
            Refresh = false;
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task UpdateList(int pageNumber = 0)
    {
        if (TotalLoadedPages <= pageNumber && !EndReached)
        {
            if (Items == null)
            {
                Items = new List<TItem>();
            }

            var loadedPageItems = await OnPageLoad.Invoke(new PageLoadEventArgs(pageNumber));
            if (loadedPageItems.Count == 0)
            {
                EndReached = true;
            }
            else
            {
                Items.AddRange(loadedPageItems);
            }
        }

        PageItems = Items.Skip(pageNumber * PageSize).Take(PageSize).ToList();
        TotalLoadedPages = (int)Math.Ceiling(Items.Count() / (decimal)PageSize);
        CurrentPage = pageNumber;

        StateHasChanged();
    }

    private async Task NavigateTo(string direction)
    {
        if (direction == "prev" && CurrentPage != 0)
            CurrentPage -= 1;
        if (direction == "next" && PageItems.Count > 0)
            CurrentPage += 1;
        if (direction == "first")
            CurrentPage = 0;
        if (direction == "last")
            CurrentPage = TotalLoadedPages - 1;

        await UpdateList(CurrentPage);
    }

}