@typeparam TItem

<div class="col-12 row">
    <table class="table table-bordered table-striped mb-0">
        <thead class="bg-info">
            <tr>
                @GridColumns
            </tr>
        </thead>
        <tbody>
            @foreach (var item in PageItems)
            {
                <tr>
                    @GridRow(item)
                </tr>
            }
        </tbody>
    </table>
</div>

<br />
<div>
    <button class="btn btn-secondary" @onclick="@(e => NavigateTo("first"))">@("<<")</button>
    <button class="btn btn-secondary" @onclick="@(e => NavigateTo("prev"))">Prev</button>
    @for (int i = 0; i < TotalLoadedPages; i++)
    {
        var pageNumber = i;
        <button class="btn @(CurrentPage == pageNumber ? "btn-dark" : "btn-info")"
                @onclick="@(e => UpdateList(pageNumber))">
            @(i + 1)
        </button>
    }
    <button class="btn btn-secondary" @onclick="@(e => NavigateTo("next"))">Next</button>
    <button class="btn btn-secondary" @onclick="@(e => NavigateTo("last"))">@(">>")</button>
</div>

@code {

    [Parameter]
    public RenderFragment GridColumns { get; set; }

    [Parameter]
    public RenderFragment<TItem> GridRow { get; set; }

    [Parameter]
    public Func<PageLoadEventArgs, Task<List<TItem>>> OnPageLoad { get; set; }

    [Parameter]
    public List<TItem> Items { get; set; }
    
    [Parameter]
    public int PageSize { get; set; } = 5;

    [Parameter]
    public bool Refresh { get; set; }

    public List<TItem> PageItems { get; set; } = new List<TItem>();

    public int TotalLoadedPages { get; set; }

    public int CurrentPage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await UpdateList();
        Refresh = false;

        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender && Refresh)
        {
            await UpdateList();
            Refresh = false;
        }

        base.OnAfterRender(firstRender);
    }

    private async Task UpdateList(int pageNumber = 0)
    {
        if (TotalLoadedPages <= pageNumber)
        {
            if (Items == null)
            {
                Items = new List<TItem>();
            }

            var loadedPageItems = await OnPageLoad.Invoke(new PageLoadEventArgs(pageNumber));
            Items.AddRange(loadedPageItems);
        }

        PageItems = Items.Skip(pageNumber * PageSize).Take(PageSize).ToList();
        TotalLoadedPages = (int)Math.Ceiling(Items.Count() / (decimal)PageSize);
        CurrentPage = pageNumber;

        StateHasChanged();
    }

    private async Task NavigateTo(string direction)
    {
        if (direction == "prev" && CurrentPage != 0)
            CurrentPage -= 1;
        if (direction == "next" && PageItems.Count > 0)
            CurrentPage += 1;
        if (direction == "first")
            CurrentPage = 0;
        if (direction == "last")
            CurrentPage = TotalLoadedPages - 1;

        await UpdateList(CurrentPage);
    }

}