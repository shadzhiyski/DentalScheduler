@attribute [Authorize(Roles = "Patient, Dentist")]

@using Interfaces.Models.Input

@inject DialogService DialogService
@inject IDentalTeamService DentalTeamService
@inject ITreatmentService TreatmentService

<EditForm EditContext="@EditContext" OnValidSubmit="OnSubmit">
    <ApplicationValidator TModel="@ITreatmentSessionInput" />

    <div class="form-group row">
        <div class="col-md-3">
            <label for="@nameof(Model.DentalTeamReferenceId)">Dental Team</label>
        </div>
        <div class="col">
            <RadzenDropDown AllowClear="true" AllowFiltering="true" TValue="string" LoadData="@LoadDentalTeams" 
                Data="@DentalTeams"
                TextProperty="Name" ValueProperty="ReferenceId" @bind-Value="DentalTeamReferenceId" >
            </RadzenDropDown>
            <ValidationMessage For="@(() => Model.DentalTeamReferenceId)" />
        </div>
    </div>
    <div class="form-group row">
        <div class="col-md-3">
            <label for="@nameof(Model.TreatmentReferenceId)">Treatment</label>
        </div>
        <div class="col">
            <RadzenDropDown AllowClear="true" AllowFiltering="true" TValue="string" LoadData="@LoadTreatments" 
                Data="@Treatments"
                TextProperty="Name" ValueProperty="ReferenceId" @bind-Value="TreatmentReferenceId" Change="@(args => OnTreatmentChange())" >
            </RadzenDropDown>
            <ValidationMessage For="@(() => Model.TreatmentReferenceId)" />
        </div>
    </div>
    <div class="form-group row">
        <div class="col-md-3">
            <label for="@nameof(Model.Start)">@nameof(Model.Start)</label>
        </div>
        <div class="col">
            <RadzenDatePicker @bind-Value="@PeriodWrapperModel.Start" Name="Model.Start" ShowTime="true" Change="@(args => OnPeriodChange())" />
            <ValidationMessage For="@(() => Model.Start)" />
        </div>
    </div>
    <AuthorizeView Roles="Dentist">
        <Authorized Context="Auth">
    <div class="form-group row">
        <div class="col-md-3">
            <label for="Duration In Minutes">Duration In Minutes</label>
        </div>
        <div class="col">
            <RadzenNumeric TValue="int" @bind-Value="DurationInMinutes" Step="15" Min="15" Change="@(args => OnPeriodChange())" />
        </div>
    </div>
        </Authorized>
    </AuthorizeView>
    <div class="form-group row">
        <div class="col-md-3">
            <label for="@nameof(Model.End)">@nameof(Model.End)</label>
        </div>
        <div class="col">
            <RadzenDatePicker @bind-Value="@PeriodWrapperModel.End" Disabled="true" Name="Model.End" ShowTime="true" />
            <ValidationMessage For="@(() => Model.End)" />
        </div>
    </div>

    <div class="form-group row">
        <div class="col-md-3"></div>
        <div class="col">
            <ValidationSummary />
        </div>
    </div>

    <div class="form-group row">
        <div class="col-md-3"></div>
        <div class="col">
            <RadzenButton ButtonType="ButtonType.Submit" Icon="save" Text="Save" />
        </div>
    </div>
</EditForm>

@code {
    public EditContext EditContext { get; set; }

    public int DefaultDurationInMinutes => 30;

    public int? StandardDurationInMinutes 
        => Treatments?.SingleOrDefault(
            t => t.ReferenceId.Equals(Model.TreatmentReferenceId?.ToString() ?? Guid.Empty.ToString())
        )
        ?.DurationInMinutes;

    public int DurationInMinutes { get; set; }
    
    public string DentalTeamReferenceId 
    { 
        get => Model.DentalTeamReferenceId?.ToString(); 
        set
        {
            if (value != null)
            {
                Model.DentalTeamReferenceId = new Guid(value);
            }
            else 
            {
                Model.DentalTeamReferenceId = null;
            }
        }
    }

    public string TreatmentReferenceId 
    { 
        get => Model.TreatmentReferenceId?.ToString(); 
        set
        {
            if (value != null)
            {
                Model.TreatmentReferenceId = new Guid(value);
            }
            else 
            {
                Model.TreatmentReferenceId = null;
            }
        }
    }

    public IEnumerable<DentalTeamDropDownViewModel> DentalTeams { get; set; }

    public IEnumerable<TreatmentDropDownViewModel> Treatments { get; set; }

    public TreatmentSessionPeriodWrapperModel PeriodWrapperModel => new TreatmentSessionPeriodWrapperModel(Model);

    [Parameter]
    public ITreatmentSessionInput Model { get; set; }

    protected override void OnInitialized()
    {
        EditContext = new EditContext(Model);
    }

    async Task LoadDentalTeams()
    {
        DentalTeams = await DentalTeamService.GetDentalTeamsDropDownListAsync();
    }

    async Task LoadTreatments()
    {
        Treatments = await TreatmentService.GetTreatmentsAsync();

        SetDurationInMinutes();
    }

    void OnTreatmentChange()
    {
        SetDurationInMinutes();

        SetPeriod();
    }

    void OnPeriodChange()
        => SetPeriod();

    void SetDurationInMinutes()
        => DurationInMinutes = Treatments.SingleOrDefault(
                t => t.ReferenceId.Equals(Model.TreatmentReferenceId?.ToString() ?? Guid.Empty.ToString())
            )
            ?.DurationInMinutes ?? DefaultDurationInMinutes;

    void SetPeriod()
        => Model.End = Model.Start.Value.AddMinutes(DurationInMinutes);

    private void OnSubmit()
        => DialogService.Close(Model);
}