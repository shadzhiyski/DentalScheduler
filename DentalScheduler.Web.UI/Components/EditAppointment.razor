@attribute [Authorize(Roles = "Patient")]

@using Microsoft.AspNetCore.Authorization;
@using Radzen
@using DentalScheduler.Interfaces.Models.Input

@inject DialogService DialogService
@inject IDentalTeamService DentalTeamService
@inject ITreatmentService TreatmentService

<EditForm EditContext="@EditContext" OnValidSubmit="OnSubmit">
    <ApplicationValidator TModel="@ITreatmentSessionInput" />

    <div class="form-group row">
        <div class="col-md-3">
            <label for="@nameof(Model.DentalTeamReferenceId)">Dental Team</label>
        </div>
        <div class="col">
            <RadzenDropDown AllowClear="true" TValue="string"
                Data="@DentalTeams"
                TextProperty="Name" ValueProperty="ReferenceId" @bind-Value="DentalTeamReferenceId" >
            </RadzenDropDown>
            <ValidationMessage For="@(() => Model.DentalTeamReferenceId)" />
        </div>
    </div>
    <div class="form-group row">
        <div class="col-md-3">
            <label for="@nameof(Model.TreatmentReferenceId)">Treatment</label>
        </div>
        <div class="col">
            <RadzenDropDown AllowClear="true" TValue="string"
                Data="@Treatments"
                TextProperty="Name" ValueProperty="ReferenceId" @bind-Value="TreatmentReferenceId" Change="@(args => Change(args))" >
            </RadzenDropDown>
            <ValidationMessage For="@(() => Model.TreatmentReferenceId)" />
        </div>
    </div>
    <div class="form-group row">
        <div class="col-md-3">
            <label for="@nameof(Model.Start)">@nameof(Model.Start)</label>
        </div>
        <div class="col">
            <RadzenDatePicker @bind-Value="@PeriodWrapperModel.Start" Name="Model.Start" ShowTime="true" />
            <ValidationMessage For="@(() => Model.Start)" />
        </div>
    </div>
    <div class="form-group row">
        <div class="col-md-3">
            <label for="@nameof(Model.End)">@nameof(Model.End)</label>
        </div>
        <div class="col">
            <RadzenDatePicker @bind-Value="@PeriodWrapperModel.End" Name="Model.End" ShowTime="true" />
            <ValidationMessage For="@(() => Model.End)" />
        </div>
    </div>

    <div class="form-group row">
        <div class="col-md-3"></div>
        <div class="col">
            <ValidationSummary />
        </div>
    </div>

    <div class="form-group row">
        <div class="col-md-3"></div>
        <div class="col">
            <button type="submit" class="btn btn-primary">Save</button>
        </div>
    </div>
</EditForm>

@code {
    public EditContext EditContext { get; set; }
    
    public string DentalTeamReferenceId 
    { 
        get => Model.DentalTeamReferenceId?.ToString(); 
        set
        {
            if (value != null)
            {
                Model.DentalTeamReferenceId = new Guid(value);
            }
            else 
            {
                Model.DentalTeamReferenceId = null;
            }
        }
    }

    public string TreatmentReferenceId 
    { 
        get => Model.TreatmentReferenceId?.ToString(); 
        set
        {
            if (value != null)
            {
                Model.TreatmentReferenceId = new Guid(value);
            }
            else 
            {
                Model.TreatmentReferenceId = null;
            }
        }
    }

    public IList<DentalTeamDropDownViewModel> DentalTeams { get; set; }

    public IList<TreatmentDropDownViewModel> Treatments { get; set; }

    public TreatmentSessionPeriodWrapperModel PeriodWrapperModel => new TreatmentSessionPeriodWrapperModel(Model);

    [Parameter]
    public ITreatmentSessionInput Model { get; set; }

    protected async override Task OnInitializedAsync()
    {
        EditContext = new EditContext(Model);

        DentalTeams = await DentalTeamService.GetDentalTeamsDropDownListAsync();
        Treatments = await TreatmentService.GetTreatmentsAsync();
    }

    void Change(object value)
    {
        System.Console.WriteLine($"Change Model: {Model.TreatmentReferenceId.ToString()}; Value: {TreatmentReferenceId}");
        
        StateHasChanged();
    }

    private void OnSubmit()
    {
        DialogService.Close(Model);
    }
}