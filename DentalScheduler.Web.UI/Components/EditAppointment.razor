@attribute [Authorize(Roles = "Patient")]

@using System.Linq
@using Mapster
@using Microsoft.AspNetCore.Authorization;
@using Radzen
@using Models
@using DentalScheduler.DTO.Input
@using DentalScheduler.Interfaces.Models.Input
@using Interfaces.Models.Output

@inject DialogService DialogService
@inject ILocalStorageService LocalStorage
@inject IDentalTeamService DentalTeamService

<EditForm EditContext="@EditContext" OnValidSubmit="OnSubmit">
    <ApplicationValidator TModel="@ITreatmentSessionInput" />

    <div class="form-group row">
        <div class="col-md-3">
            <label for="@nameof(Model.DentalTeamId)">Dental Team</label>
        </div>
        <div class="col">
            <RadzenDropDown AllowClear="true" TValue="string"
                Data="@DentalTeams"
                TextProperty="Name" ValueProperty="ReferenceId" @bind-Value="DentalTeamId" Change="@(args => Change(args))" >
            </RadzenDropDown>
            <ValidationMessage For="@(() => Model.DentalTeamId)" />
        </div>
    </div>
    <div class="form-group row">
        <div class="col-md-3">
            <label for="@nameof(Model.Reason)">@nameof(Model.Reason)</label>
        </div>
        <div class="col">
            <RadzenTextArea @bind-Value="@Model.Reason" MaxLength="256" Cols="64" Rows="4" Placeholder="Describe reason here..." />
            <ValidationMessage For="@(() => Model.Reason)" />
        </div>
    </div>
    <div class="form-group row">
        <div class="col-md-3">
            <label for="@nameof(Model.Start)">@nameof(Model.Start)</label>
        </div>
        <div class="col">
            <RadzenDatePicker @bind-Value="@PeriodWrapperModel.Start" Name="Model.Start" ShowTime="true" />
            <ValidationMessage For="@(() => Model.Start)" />
        </div>
    </div>
    <div class="form-group row">
        <div class="col-md-3">
            <label for="@nameof(Model.End)">@nameof(Model.End)</label>
        </div>
        <div class="col">
            <RadzenDatePicker @bind-Value="@PeriodWrapperModel.End" Name="Model.End" ShowTime="true" />
            <ValidationMessage For="@(() => Model.End)" />
        </div>
    </div>

    <div class="form-group row">
        <div class="col-md-3"></div>
        <div class="col">
            <ValidationSummary />
        </div>
    </div>

    <div class="form-group row">
        <div class="col-md-3"></div>
        <div class="col">
            <button type="submit" class="btn btn-primary">Save</button>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public ITreatmentSessionOutput TreatmentSession { get; set; }

    public EditContext EditContext { get; set; }
    
    public string DentalTeamId 
    { 
        get => Model.DentalTeamId?.ToString(); 
        set
        {
            if (value != null)
            {
                Model.DentalTeamId = new Guid(value);
            }
            else 
            {
                Model.DentalTeamId = null;
            }
        }
    }

    public IList<DentalTeamDropDownViewModel> DentalTeams { get; set; }

    public TreatmentSessionPeriodWrapperModel PeriodWrapperModel => new TreatmentSessionPeriodWrapperModel(Model);

    public ITreatmentSessionInput Model { get; set; } = new TreatmentSessionInput();

    protected async override Task OnInitializedAsync()
    {
        EditContext = new EditContext(Model);

        DentalTeams = await DentalTeamService.GetDentalTeamsDropDownListAsync();
    }

    protected override async void OnParametersSet()
    {
        Model.Status = TreatmentSession.Status ?? "Requested";
        Model.Start = TreatmentSession.Start;
        Model.End = TreatmentSession.End;
        Model.Reason = TreatmentSession.Reason;
        Model.DentalTeamId = TreatmentSession.DentalTeam.ReferenceId;
        if (TreatmentSession.DentalTeam.ReferenceId == Guid.Empty)
        {
            Model.DentalTeamId = null;    
        }

        Model.PatientId = await LocalStorage.ContainKeyAsync("PatientReferenceId")
            ? await LocalStorage.GetItemAsync<Guid>("PatientReferenceId")
            : Guid.Empty;
    }

    void Change(object value)
    {
        System.Console.WriteLine($"Change Model: {Model.DentalTeamId.ToString()}; Value: {DentalTeamId}");
        
        StateHasChanged();
    }

    async Task<bool> OnSubmit()
    {
        DialogService.Close(Model);

        return true;
    }
}